---
# This role will install Consul Servers/Agents in all machines. After that it installs the Registrators.
# There is a group of machines in the corresponding environment inventory called 'consul_servers' where the Consul Servers are installed
# In this way they build up a Consul Cluster
# Other machines that are not in the 'consul_servers' group, have the Consul Agents
# The template 'config.json.j2' will look at the environment inventory to decide to generate a config file for booting a server or an agent

- name: ensure consul config directory exists
  file:
    path: "{{ consul_conf_dir }}"
    state: directory
  when: "'consul_servers' in group_names"

- name: copy template from local to remote in consul config directory
  template:
    src: config.json.j2
    dest: "{{ consul_conf_dir }}/config.json"
  when: "'consul_servers' in group_names"

- name: ensure consul log directory is created with permissions
  file:
    path: "{{ whisk_logs_dir }}/consul"
    state: directory
    mode: 0777
  become: true

- name: "pull the consul:{{ consul.version }} image"
  shell: "docker pull consul:{{ consul.version }}"

- name: (re)start consul server/agent
  docker_container:
    name: consul
    image: consul:{{ consul.version }}
    state: started
    recreate: true
    restart_policy: "{{ docker.restart.policy }}"
    command: "consul agent -config-dir /consul/config"
    volumes:
      - "{{ whisk_logs_dir }}/consul:/logs"
      - "{{ consul_conf_dir }}:/consul/config"
    ports:
      - "{{ consul.port.dns }}:8600/udp"
      - "{{ consul.port.http }}:8500"
      - "{{ consul.port.rpc }}:8400"
      - "{{ consul.port.serf_wan }}:8302"
      - "{{ consul.port.serf_lan }}:8301"
      - "{{ consul.port.serf_wan }}:8302/udp"
      - "{{ consul.port.serf_lan }}:8301/udp"
      - "{{ consul.port.server }}:8300"
  when: "'consul_servers' in group_names"

- name: wait until the Consul Server/Agent in this host is up and running
  uri:
    method: PUT
    url: "http://{{ inventory_hostname }}:{{ consul.port.http }}/v1/kv/consulIsAlive"
    body: 'true'
  register: result
  until: result.status == 200
  retries: 12
  delay: 5
  when: "'consul_servers' in group_names"

- name: delete is alive token from Consul Server/Agent
  uri:
    method: DELETE
    url: "http://{{ inventory_hostname }}:{{ consul.port.http }}/v1/kv/consulIsAlive"
  register: result
  until: result.status == 200
  retries: 10
  delay: 1
  when: "'consul_servers' in group_names"

- name: notify handler to fill in Consul KV store with parameters in whisk.properties
  command: "true"
  notify: fill consul kv
  when: "'consul_servers' in group_names"

- name: start registrator using docker cli
  shell: >
        docker run -d
        --name registrator
        --hostname registrator
        --restart {{ docker.restart.policy }}
        --log-driver syslog
        -v {{ whisk_logs_dir }}/registrator:/logs
        -v {{ docker_sock | default('/var/run/docker.sock') }}:/tmp/docker.sock
        --userns host
        gliderlabs/registrator -ip {{ ansible_host | default(inventory_hostname) }} -resync 2 consul://{{ groups['consul_servers'] | first }}:{{ consul.port.http }}

# todo: re-enable docker_container module once https://github.com/ansible/ansible-modules-core/issues/5054 is resolved
